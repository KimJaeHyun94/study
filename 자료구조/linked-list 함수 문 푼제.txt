#include<stdio.h>
#include<stdlib.h>
#include<windows.h>
#define EMPTY 0

typedef struct node {
	int data;
	struct node*link;
}List;

List*get_node() {
	List *tmp;
	tmp = (List*)malloc(sizeof(List));
	tmp->link = EMPTY;
	return tmp;
}
void InsertNode(List**head, int data) {
	if (*head == EMPTY) {
		List*tmp;
		tmp = *head;
		*head = get_node();
		(*head)->data = data;
		(*head)->link = tmp;
		return;
	}
	InsertNode(&(*head)->link, data);
}
int DeleteNode(List**head) {
	List*tmp;
	tmp = *head;
	int num;
	if (tmp == EMPTY) {
		printf("empty data\n");
		return 0;
	}
	num = tmp->data;
	*head = (*head)->link;
	free(tmp);
	return num;
}
void print_data(List**head) {
	List*tmp;
	tmp = *head;
	if (tmp != EMPTY) {
		printf("%d\n", tmp->data);
		tmp = tmp->link;
		print_data(&tmp);
	}
	else {
		printf("empty data\n");
	}
}
int main() {
	List *head = EMPTY;
	int n, num;
	while (1)
	{
		system("cls");
		printf("stack프로그램입니다\n");
		printf("1. enq\n2. deq\n3. print_data\n4. 종료\n");
		printf(">>>>>> : ");
		scanf("%d", &n);
		if (n < 0 || n>4)
			continue;
		switch (n) {
		case 1:
			printf("수를 입력하시오 :");
			scanf("%d", &num);
			InsertNode(&head, num);
			system("pause");
			continue;
		case 2:
			if (head != EMPTY) {
				printf("%d\n", DeleteNode(&head));
			}
			else {
				printf("empty data\n");
			}
			system("pause");
			continue;
		case 3:
			print_data(&head);
			system("pause");
			continue;
		case 4:
			printf("모든 공간 해제\n");
			while (head) {
				Sleep(500);
				printf("%d\n", DeleteNode(&head));
			}
			Sleep(500);
			printf("empty data\n");
			return 0;
		}
	}
}
